/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package domaticnumber;

import com.sun.imageio.plugins.common.BogusColorSpace;
import java.awt.Color;
import java.awt.Graphics;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import sun.nio.cs.ext.Big5;

/**
 *
 * @author lusec
 */
public class Ventana extends javax.swing.JFrame {
    
    int tamVentana=750;
    public static int tamCanvasX=500;
    public static int tamCanvasY=400;
    public static int posCanvasX=10;
    public static int posCanvasY=159;
    public static int radioNodo= 7;
    ArrayList<Grupo> grupos =new ArrayList();//Arraylist de tipo grupo que guarda todos los grupos encontrados.
    //ArrayList<String> vertices = new ArrayList();//ArrayList de todos los verices del grafo
    //ArrayList<String> aristas= new ArrayList();//ArrayList de todas las aristas del Grafo.
    ArrayList<Arista> aristaS= new ArrayList<Arista>();
    ArrayList<Vertice> verticeS= new ArrayList<Vertice>();
    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        canvas1 = new java.awt.Canvas();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Vértices:");

        jButton1.setText("Dibujar Grafo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Aristas:");

        jScrollPane2.setViewportView(jList2);

        canvas1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Domatic Number of a Graph");

        jButton2.setText("Restablecer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Redibujar Grafo");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94)
                                .addComponent(jButton2))
                            .addComponent(jButton1)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //EVENTO DE PRESIONAR EL BOTON
        String[] ver;
        String[] ar;
        if (verifTexto(jTextField1.getText()) && verifTexto(jTextField2.getText())) {
            limpiarCanvas(canvas1.getGraphics());
            ver = jTextField1.getText().split(" ");//Vector de las aristas
            ar= jTextField2.getText().split(" ");//Vector de los vertices
            crearGrafo(ver,ar);
            dibujarGrafo(canvas1.getGraphics());
            jButton1.setEnabled(false);
            domaticNumber();//Se ejectuTa la subrutina que determina el numero domatico del grafo y los grupos dominantes de este
            colorearGrupo(canvas1.getGraphics());
            mostrar();//Se ejecuta la subrutina que muestra los resultados obtenidos
            jButton3.setEnabled(true);
        }
        else
        {
            JOptionPane.showMessageDialog(this, "El campo de los vertices está vacio");
        }
        
        
        
        
        /*
        aristas.addAll(Arrays.asList(ar));//Al arraylist de aristas se le asignan cada arista en su respectivo indice para mayor facilidad a la hora de trabajar
        vertices.addAll(Arrays.asList(ver));//De igual forma con los vertices*/
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        canvas1.setLocation(Ventana.posCanvasX, Ventana.posCanvasY);
        this.setSize(tamVentana, tamVentana);
        jButton3.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    //BOTON PARA REDIBUJAR EL GRAFO POR CUESTIONES ESTETICAS
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        limpiarCanvas(canvas1.getGraphics());
        reubicarVertices();
        dibujarGrafo(canvas1.getGraphics());
        colorearGrupo(canvas1.getGraphics());
    }//GEN-LAST:event_jButton3ActionPerformed

    //BOTON PARA LIMPIAR TODOS LOS DATOS Y CONSTRUIR UN NUEVO GRAFO
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextField1.setText("");
        jTextField2.setText("");
        verticeS.clear();
        aristaS.clear();
        grupos.clear();
        limpiarCanvas(canvas1.getGraphics());
        jButton1.setEnabled(true);
        jButton3.setEnabled(false);
        DefaultListModel modelo= new DefaultListModel();
        jList2.setModel(modelo);
    }//GEN-LAST:event_jButton2ActionPerformed

    boolean verifTexto(String texto){
        if (!texto.equals("")) {
            return true;
        }
        else
        {
            return false;
        }
    }
    //GRAFICO
    
    Color obtenerColor(int i){
        switch (i) {
            case 0:
                return Color.BLUE;
            case 1:
                return Color.RED;
            case 2:
                return Color.GREEN;
            case 3:
                return Color.YELLOW;
            case 4:
                return Color.PINK;
            case 5:
                return Color.GRAY;
            default:
                return Color.WHITE;
        }
    }
    
    void colorearGrupo(Graphics g){
        for (int i = 0; i < grupos.size(); i++) {
            g.setColor(obtenerColor(i));
            for (int j = 0; j < grupos.get(i).getVertices().size(); j++) {
                g.fillOval(grupos.get(i).getVertices().get(j).coordX, grupos.get(i).getVertices().get(j).getCoordY(), Ventana.radioNodo*2, Ventana.radioNodo*2);
            }
        }
    }
            
    void reubicarVertices(){
        for (int i = 0; i < verticeS.size(); i++) {
            verticeS.get(i).setCoordX();
            verticeS.get(i).setCoordY();
        }
    }
    
    void dibujarVertices(Graphics g){
        for (int i = 0; i < verticeS.size(); i++) {
            g.fillOval(verticeS.get(i).getCoordX(), verticeS.get(i).getCoordY(), this.radioNodo*2, this.radioNodo*2);
            g.drawString(verticeS.get(i).getNombre(), verticeS.get(i).getCoordX()+this.radioNodo, verticeS.get(i).getCoordY()-this.radioNodo);
        }
    }
    void dibujarAristas(Graphics g){
        for (int i = 0; i < aristaS.size(); i++) {
            Arista a= aristaS.get(i);
            g.drawLine(a.getV1().getCoordX()+this.radioNodo, a.getV1().getCoordY()+this.radioNodo, a.getV2().getCoordX()+this.radioNodo, a.getV2().getCoordY()+this.radioNodo);
            //g.drawLine(aristaS.get(i).getV1().getCoordX(), aristaS.get(i).getV1().getCoordY(), aristaS.get(i).getV2().getCoordX(), aristaS.get(i).getV2().getCoordY());
        }
    }
    
    void dibujarGrafo(Graphics g){
        dibujarVertices(g);
        dibujarAristas(g);
    }
    
    void crearVertices(String[] vert){
        BigInteger i= new BigInteger("0");
        while(i.compareTo(new BigInteger(vert.length+"")) == -1){
            Vertice v= new Vertice(vert[i.intValue()]);
            verticeS.add(v);
            i=i.add(BigInteger.ONE);
        }
//        for (int i = 0; i < vert.length; i++) {
//            Vertice v= new Vertice(vert[i]);
//            verticeS.add(v);
//        }
    }
    
    void crearAristas(String[] ar){//Crear las aristas del grafo con los vertices existentes
        BigInteger i= new BigInteger("0");
        while(i.compareTo(new BigInteger(ar.length+"")) == -1){
            Arista a= new Arista(ar[i.intValue()], obtenerVertice(obternerVertdeArista(ar[i.intValue()], 1)), obtenerVertice(obternerVertdeArista(ar[i.intValue()], 2)));
            aristaS.add(a);
            i=i.add(BigInteger.ONE);
        }

//        for (int i = 0; i < ar.length; i++) {
//            Arista a= new Arista(ar[i], obtenerVertice(obternerVertdeArista(ar[i], 1)), obtenerVertice(obternerVertdeArista(ar[i], 2)));
//            aristaS.add(a);
//        }
    }
    
    void crearGrafo(String[] verts,String[] arist){
        crearVertices(verts);
        crearAristas(arist);
    }
    
    Vertice obtenerVertice(String nombre){//Devuelve el vertice tipo vertice de la arista. lo toma del array de Vertices
        BigInteger i= new BigInteger("0");
        while(i.compareTo(new BigInteger(""+verticeS.size())) == -1){
            if (nombre.equals(verticeS.get(i.intValue()).getNombre())) {
                return verticeS.get(i.intValue());
            }
            i= i.add(BigInteger.ONE);
        }
//        for (int i = 0; i < verticeS.size(); i++) {
//            if (nombre.equals(verticeS.get(i).getNombre())) {
//                return verticeS.get(i);
//            }
//        }
        return null;
    }
    
    String obternerVertdeArista(String ari,int cualvert){//Vertice 1 o 2 de la arista en String
        return ari.substring(cualvert-1, cualvert);
    }
    
    void limpiarCanvas(Graphics g){
        g.clearRect(0, 0, tamCanvasX, tamCanvasY);
    }
    
    
    public void domaticNumber(){//Subrutina que encuentra el numero domatico y los conjuntos dominantes del grafo

        boolean sw=false;//Swiche que controla si los vertices seleccionados hasta el momento es o no un grupo
        boolean sw2=false;//Swiche que controla si ya se han encontrado o no todos los grupos
        int i=0;
        
        ArrayList<Vertice> adya= new ArrayList();
        while(!sw2){//MQ no se hayan encontrado todos los grupos dominantes posibles
            i=0;
            sw=false;
            
            ArrayList<Vertice> verG= new ArrayList();
            
            adya.clear();//se limpia la lista de vertices adyacentes
            while(sw==false && i<verticeS.size()){

                if (!adya.contains(verticeS.get(i)) && !verG.contains(verticeS.get(i)) && !verifEstaEnGrupo(verticeS.get(i))){// verigica que el vertice a tomar no haya sido seleciionado antes
                    for (int j = 0; j < aristaS.size(); j++) {
                        if (aristaS.get(j).getV1().getNombre().equals(verticeS.get(i).getNombre())){//si el primer vertice de la arista es igual al vertice actaul
                            adya.add(aristaS.get(j).getV2());//Agrega a la lista de vertices adyacentes el vertice dos de la arista actual
                        }else
                            if(aristaS.get(j).getV2().getNombre().equals(verticeS.get(i).getNombre())){//Si el seundo vertice de la arista es igual al vertice actual
                                adya.add(aristaS.get(j).getV1());//Agrega a la lista de vertices adyacentes el vertice uno de la arista
                            }
                    }
                    verG.add(verticeS.get(i));//Se añade el vertice actual que no ha sido escogido antes y hacen parte del conjunto dominante
                    sw= verifEsGrupo(verG, adya);//Se verifica que los vertices seleccionados hasta el momento conforman o no un grupo dominante del grafo
                }
                else
                    if (verticesSobrantes(verG) == 1 && verticeSobra(verG,verticeS.get(i)) && adya.contains(verticeS.get(i))){//Vertice que fue seleccionado antes pero es el ultimo sobrante 
                        verG.add(verticeS.get(i));//Se agrega al conjunto de vertices que no han sido escogidos antes y hacen parte del conjunto dominante
                        
                        for (int k = 0; k < aristaS.size(); k++) {
                        if (aristaS.get(k).getV1().getNombre().equals(verticeS.get(i).getNombre())){//si el primer vertice de la arista es igual al vertice actaul
                            adya.add(aristaS.get(k).getV2());//Agrega a la lista de vertices adyacentes el vertice dos de la arista actual
                        }else
                            if(aristaS.get(k).getV2().getNombre().equals(verticeS.get(i).getNombre())){//Si el seundo vertice de la arista es igual al vertice actual
                                adya.add(aristaS.get(k).getV1());//Agrega a la lista de vertices adyacentes el vertice uno de la arista
                            }
                        }
                        sw=verifEsGrupo(verG, adya);//Se verifica que los vertices seleccionados formen o no un grupo dominante
                    }
                    
                i++;//Aumento de i la variable que controla el vertice a evaluar.
            }
            Grupo g= new Grupo();//Se crea una instancia de Grupo
            if (sw == true) {
                g.setVertices(verG);//Al parametro de vertices que conforman el grupo de la instancia g se le asigna el grupo creado actualmente
                grupos.add(g);//Se guarda en la lista global de los grupos encontrados hasta ahora
                sw2=verifFin(verG);//Se verifica si se han encontrado todos los posibles grupos dminantes del grafo
            }
            else
            {
                if (verticesSobrantes(verG) == 0) {
                    sw2=true;
                }
            }
        }
    }
    
    boolean verticeSobra(ArrayList<Vertice> verG, Vertice vertice){
        for (int i = 0; i < grupos.size(); i++) {
            for (int j = 0; j < grupos.get(i).getVertices().size(); j++) {
                if (grupos.get(i).getVertices().contains(vertice)) {//-------------------------------------------------
                    return false;
                }
            }
        }
        if (verG.contains(vertice)) {
            return false;
        }
        return true;
    }
    

    
    int verticesSobrantes(ArrayList<Vertice> verG){
        int cont=0;
        boolean sw=false;
        int j;
        for (int i = 0; i < verticeS.size(); i++) {
            j=0;
            sw=false;
            if (verG.contains(verticeS.get(i))) {
                cont++;
                sw=true;
            }
            while(j  < grupos.size() && sw == false) {
                if (grupos.get(j).getVertices().contains(verticeS.get(i))) {
                    cont++;
                    sw=true;
                }
                j++;
            
            }
        }
        
        return verticeS.size()-cont;
    }
    
    boolean verifFin(ArrayList<Vertice> vertG){//Verificar si ya Econtro todos los posibles grupos
        int cont=0;
        int j=0;
        boolean sw=true;
        for (int i = 0; i < verticeS.size(); i++) {
            sw=false;
            j=0;
            if (vertG.contains(verticeS.get(i))) {
                cont++;
                sw=true;
            }
            while (j < grupos.size() && sw==false){

                if (grupos.get(j).getVertices().contains(verticeS.get(i))) {
                    cont++;
                    sw=true;
                }
                j++;

            }
        }
        if (cont == verticeS.size()) {
            return true;
        }
        return false;
    }
    
    
    boolean verifEstaEnGrupo(Vertice vertice){
        for (int j = 0; j < grupos.size(); j++) {
                if (grupos.get(j).getVertices().contains(vertice)) {
                    return true;
                }
        }
    return false;//sw
    }
    
    
    boolean verifEsGrupo(ArrayList<Vertice> verG, ArrayList<Vertice> adya){
        boolean sw=false;
        for (int i = 0; i < verticeS.size(); i++) {
            if (verG.contains(verticeS.get(i)) || adya.contains(verticeS.get(i))) {//Para poder formar un grupo es necesario que se hallan escogido
                sw=true;                                                           //Todos los vertces que generan al grafo. es decir que todos los vertices
            }                                                                       //Deben estar en alguno de los dos grupos los los dominantes o los adyacentes, de esa forma se sabe si el conjunto forma o no un grupo
            else
            {
                return false;
            }
        }
        return sw;
    }
    
    
    void mostrar(){//Subrutina para mostrar los resultados obtenidos
        DefaultListModel lista= new DefaultListModel();
        lista.addElement("El numero Domatico del grafo es: "+grupos.size());
        for (int i = 0; i < grupos.size(); i++) {
            lista.addElement("Grupo V"+(i+1));
            for (int j = 0; j < grupos.get(i).getVertices().size(); j++) {
                lista.addElement(grupos.get(i).getVertices().get(j).getNombre());
            }
        }
        jList2.setModel(lista);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
